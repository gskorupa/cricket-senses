<?xml version="1.0" encoding="UTF-8"?>
<project name="sensesservice" default="all" basedir=".">
    <!-- modify the project name above if you need -->
    
    <description>Cricket Senses service</description>
        
    <!-- set your local properties for this build -->
    <property name="version" value="1.0.2"/>
    <property name="cricket-jar-location" value="lib/cricket-1.0.0.jar" />
    <property name="docker-repository" value="gskorupa" />
    
    <!-- do not modify properties below -->
    <property name="src" location="src/java"/>
    <property name="build" location="build/web/WEB-INF/classes"/>
    <property name="dist" location="dist"/>
    <property name="web" location="web"/>
    <property name="lib" location="lib"/>
    
    <path id="project-classpath">
        <pathelement location="${cricket-jar-location}"/>
        <pathelement location="${lib}/pi4j-core.jar"/>
        <!--<pathelement location="${lib}/h2-1.3.176.jar"/>-->
        <!-- uncomment if you need Tomcat libraries to compile the project
        <fileset dir="${tomcat-home}/bin" includes="*.jar" />
        <fileset dir="${tomcat-home}/lib" includes="*.jar" />
        -->
    </path>

    <target name="init">
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>

    <target name="compile" depends="init" description="compile the source">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac 
            target="1.8" 
            source="1.8" 
            srcdir="${src}" 
            destdir="${build}"
            includeantruntime="false" 
            classpathref="project-classpath">
            <compilerarg value="-Xlint:-options"/>          
        </javac>
    </target>

    <target name="dist" depends="clean, compile"
            description="generate the distribution">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}"/>
        <antcall inheritall="true" target="jar"/>
    </target>

    <target name="clean" description="clean up">
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>
    
    <target name="jar" depends="compile">
        <copy todir="${build}" overwrite="true">
            <fileset dir="${src}" includes="*.json"/>
            <fileset dir="${src}" includes="*.txt"/>
        </copy>
        <jar destfile="${dist}/${ant.project.name}-${version}.jar">
            <manifest>
                <!-- change the main class declaration below -->
                <attribute name="Main-Class" value="org.cricketmsf.Runner"/>
            </manifest>
            <fileset dir="${build}"/>
            <zipfileset src="${cricket-jar-location}" excludes="**/*.json" includes="**/*"/>
            <zipfileset src="${lib}/pi4j-core.jar" includes="com/**/*,lib/**/*"/>
            <!--<zipfileset src="${lib}/h2-1.3.176.jar" includes="org/**/*"/>-->
        </jar>
    </target>
    
    <target name="docker-build" depends="jar" description="create new tagged image">
        <exec executable="docker">
            <arg value="build"/>
            <arg value="-t"/>
            <arg value="${docker-repository}/${ant.project.name}:${version}"/>
            <arg value="."/>
        </exec>
    </target>
    
    <target name="docker-push" description="push current image to the repository">
        <exec executable="docker">
            <arg value="push"/>
            <arg value="${docker-repository}/${ant.project.name}:${version}"/>
        </exec>
    </target>

    <target name="docker-run" depends="jar" description="create and run the new container">
        <exec executable="docker">
            <arg value="run"/>
            <arg value="-d"/>
            <arg value="-p"/>
            <arg value="127.0.0.1:8090:8090"/>
            <arg value="-v"/>
            <arg value="${basedir}/data:/usr/cricket/data"/>
            <arg value="--name"/>
            <arg value="${ant.project.name}"/>
            <arg value="${docker-repository}/${ant.project.name}:${version}"/>
        </exec>
    </target>
    
    <target name="docker-start" depends="jar" description="start stopperd container">
        <exec executable="docker">
            <arg value="start"/>
            <arg value="${ant.project.name}"/>
        </exec>
    </target>
    
    <target name="docker-stop" depends="jar" description="stop running container">
        <exec executable="docker">
            <arg value="stop"/>
            <arg value="${ant.project.name}"/>
        </exec>
    </target>
       
</project>
